-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) INSTALL GRALLVM:
download graalvm-jdk-21_linux-x64_bin.tar.gz

2)change to directory where you want to install GraalVM, then move the .tar.gz file to that directory.
#Unzip the archive:
 cd GrallVM21 
 tar -xzf graalvm-jdk-21_linux-x64_bin.tar.gz
 
 /Home/GrallVM21/graalvm-jdk-21.0.2+13.1
 
3)There can be multiple JDKs installed on the machine. The next step is to configure the runtime environment:

#Set the value of the JAVA_HOME, PATH, GRAALVM_HOME environment variable to the installation directory:
 
 export M2_HOME=/opt/apache-maven-3.9.6
 export MAVEN_HOME=/opt/apache-maven-3.9.6
 export JAVA_HOME=/home/sabrina/GrallVM21/graalvm-jdk-21.0.2+13.1
 export PATH=/home/sabrina/GrallVM21/graalvm-jdk-21.0.2+13.1/bin:$PATH
 export GRAALVM_HOME=/home/sabrina/GrallVM21/graalvm-jdk-21.0.2+13.1

# Listar las variables de entorno
printenv | less
printenv MAVEN_HOME
printenv JAVA_HOME
printenv PATH
printenv GRAALVM_HOME

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#1)REPOSITORY:

git clone https://github.com/sabrinacis/demoSpringNativeJFR.git

 
#2)Ejecutar con Spring Boot:
mvn spring-boot:run
curl "http://localhost:8080/springNative/jrf"

#3)Ejecutar con Maven:
mvn clean package
java -jar ./home/sabrina/IdeaProjects/springNativeJFR/target/springNativeJFR-0.0.1-SNAPSHOT.jar
curl "http://localhost:8080/springNative/jrf"



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#CREACION Y EJECUCION ARTEFACTO NATIVO

cd demo

#1) Creación ejecutable nativo con GraalVM:

./mvnw native:compile -Pnative

#2) Run the native executable and put it into the background by appending &:

 ./target/demo &

#3) Call the endpoint using curl:

 curl "http://localhost:7092/springNative/jrf"
 
 
#4) Containerise the Native Executable
 #4.1) Containerise the native executable using the following command:
   
   docker build -f /home/sabrina/IdeaProjects/demoSpringNativeJFR/Dockerfile \
             --build-arg APP_FILE=./target/demoSpringNativeJFR \
             -t localhost/demospringnativejfr:springnativejfr:springnativejfr.01 .


 #4.2) Run the application:

 docker run --rm --name native -p 8080:8080 localhost/demospringnativejfr:springnativejfr.01 
 
  #4.3) Test

  curl "http://localhost:8080/springNative/jrf"
 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#CREACION Y EJECUCION ARTEFACTO NATIVO 2

#1) Creación ejecutable nativo con GraalVM:

mvn -Pnative native:compile

  
#1.1 OK) Test de la aplicacion desde el jar  demoSpringNative-0.0.1-SNAPSHOT.jar
  
 $JAVA_HOME/bin/java -XX:+HeapDumpOnOutOfMemoryError -XX:StartFlightRecording=duration=60s,loglevel=trace,filename=demoSpringNative.jfr   -jar target/demoSpringNative-0.0.1-SNAPSHOT.jar
  
 curl "http://localhost:7092/springNative/jrf"
  
  
  
 #1.2  OK!!)   Test de la aplicacion desde el archivo ejecutable  demo

./target/demo .  
 curl "http://localhost:7092/springNative/jrf"
 
  
#1.3 NOT OK!!)   Test de la aplicacion desde el archivo ejecutable  demoSpringNative

./target/demoSpringNative .  ==>>NO OK
 
  

  
  
  
  
  
  
  
  
  
  
  
  
  docker build -t demoSpringNative .
 
  
 

#2) Creación imagen Docker con ejecutable nativo:

mvn -Pnative spring-boot:build-image -Dspring-boot.build-image.imageName=demo-springNative21:1.0.0 .:latest
docker run --rm -p 7086:7086 demo-springNative21:1.0.0


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#4)CREATED IMAGE:


mvn -Pnative spring-boot:build-image -Dspring-boot.build-image.imageName=springNativejfr/demo-spring-nativeJFR:latest

docker build -t demo-jvm21:1.0.0 .

docker images

REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
demo-jvm21    1.0.0     88069d2fb9b5   2 minutes ago   548MB


#5)RUN:

docker run -p 7082:7082 demo-jvm21:1.0.0 .


#6)TEST:
ab -n10 -c10 -s50000 http://localhost:7082/springNative/jrf
curl "http://localhost:8085/springNative/jrf"
